{"version":3,"file":"static/iframe.6c6d21281d63d38e0c96.bundle.js","sources":["webpack:///./src/lib/redux.js"],"sourcesContent":["// A simple redux store/actions/reducer implementation.\r\n// A true app would be more complex and separated into different files.\r\nimport { createStore } from 'redux';\r\n\r\n// The actions are the \"names\" of the changes that can happen to the store\r\nexport const actions = {\r\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\r\n  PIN_TASK: 'PIN_TASK',\r\n};\r\n\r\n// The action creators are how you bundle actions with the data required to execute them\r\nexport const archiveTask = id => ({ type: actions.ARCHIVE_TASK, id });\r\nexport const pinTask = id => ({ type: actions.PIN_TASK, id });\r\n\r\n// All our reducers simply change the state of a single task.\r\nfunction taskStateReducer(taskState) {\r\n  return (state, action) => {\r\n    return {\r\n      ...state,\r\n      tasks: state.tasks.map(\r\n        task => (task.id === action.id ? { ...task, state: taskState } : task)\r\n      ),\r\n    };\r\n  };\r\n}\r\n\r\n// The reducer describes how the contents of the store change for each action\r\nexport const reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case actions.ARCHIVE_TASK:\r\n      return taskStateReducer('TASK_ARCHIVED')(state, action);\r\n    case actions.PIN_TASK:\r\n      return taskStateReducer('TASK_PINNED')(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// The initial state of our store when the app loads.\r\n// Usually you would fetch this from a server\r\nconst defaultTasks = [\r\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\r\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\r\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\r\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\r\n];\r\n\r\n// We export the constructed redux store\r\nexport default createStore(reducer, { tasks: defaultTasks });"],"mappings":"AAKA","sourceRoot":""}